{"version":3,"file":"LazySection-CPTDV2LF.js","sources":["../../src/composables/useLazySection.ts","../../src/components/LazySection.vue"],"sourcesContent":["import { ref, onMounted, onBeforeUnmount } from 'vue'\nimport type { Ref } from 'vue'\n\ninterface LazyProps {\n  threshold: number;\n  rootMargin: string;\n}\n\ninterface LazySection {\n  lazySection: Ref<HTMLElement | null>;\n  isVisible: Ref<boolean>;\n}\n\nexport function useLazySection(props: LazyProps): LazySection {\n  const lazySection = ref<HTMLElement | null>(null)\n  const isVisible = ref<boolean>(false)\n  let observer: IntersectionObserver | null = null\n\n  onMounted(() => {\n    observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          isVisible.value = entry.isIntersecting\n        })\n      },\n      {\n        threshold: props.threshold,\n        rootMargin: props.rootMargin\n      }\n    )\n    \n    if (lazySection.value) {\n      observer.observe(lazySection.value)\n    }\n  })\n\n  onBeforeUnmount(() => {\n    if (observer && lazySection.value) {\n      observer.unobserve(lazySection.value)\n      observer.disconnect()\n    }\n  })\n\n  return {\n    lazySection,\n    isVisible\n  }\n} ","<template>\n  <div ref=\"lazySection\" :class=\"['lazy-section', { 'lazy-visible': isVisible, 'lazy-hidden': !isVisible }]\">\n    <slot></slot>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { useLazySection } from '../composables/useLazySection'\n\nconst props = defineProps({\n  threshold: {\n    type: [Number, String],\n    default: 0.1,\n    validator: (value: number | string): boolean => {\n      const numValue = typeof value === 'string' ? parseFloat(value) : value;\n      return !isNaN(numValue) && numValue >= 0 && numValue <= 1;\n    }\n  },\n  rootMargin: {\n    type: String,\n    default: '0px'\n  }\n})\n\n// Convert threshold to number if it's a string\nconst parsedProps = {\n  threshold: typeof props.threshold === 'string' ? parseFloat(props.threshold) : props.threshold,\n  rootMargin: props.rootMargin\n};\n\nconst { lazySection, isVisible } = useLazySection(parsedProps)\n</script>\n\n<script lang=\"ts\">\nexport default {\n  name: 'LazySection'\n}\n</script>\n\n<style scoped>\n.lazy-section {\n  display: block;\n  perspective: 1000px;\n}\n\n.lazy-hidden {\n  opacity: 0;\n  transform: translateY(80px) scale(0.9) rotate(-2deg);\n  transition: opacity 0.5s cubic-bezier(0.19, 1, 0.22, 1), transform 0.5s cubic-bezier(0.19, 1, 0.22, 1), filter 0.5s ease;\n  filter: blur(8px);\n  transform-origin: center bottom;\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0);\n}\n\n.lazy-visible {\n  opacity: 1;\n  transform: translateY(0) scale(1) rotate(0);\n  transition: opacity 0.5s cubic-bezier(0.19, 1, 0.22, 1), transform 0.5s cubic-bezier(0.19, 1, 0.22, 1), filter 0.5s ease, box-shadow 0.5s ease;\n  filter: blur(0);\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n}\n</style>\n"],"names":["_createElementBlock","_normalizeClass","_unref","_renderSlot"],"mappings":";;;AAaO,SAAS,eAAe,OAA+B;AAC5D,QAAM,cAAc,IAAwB,IAAI;AAChD,QAAM,YAAY,IAAa,KAAK;AACpC,MAAI,WAAwC;AAE5C,YAAU,MAAM;AACd,eAAW,IAAI;AAAA,MACb,CAAC,YAAY;AACX,gBAAQ,QAAQ,CAAA,UAAS;AACvB,oBAAU,QAAQ,MAAM;AAAA,QAAA,CACzB;AAAA,MAAA;AAAA,MAEH;AAAA,QACE,WAAW,MAAM;AAAA,QACjB,YAAY,MAAM;AAAA,MAAA;AAAA,IACpB;AAGF,QAAI,YAAY,OAAO;AACrB,eAAS,QAAQ,YAAY,KAAK;AAAA,IAAA;AAAA,EACpC,CACD;AAED,kBAAgB,MAAM;AACpB,QAAI,YAAY,YAAY,OAAO;AACjC,eAAS,UAAU,YAAY,KAAK;AACpC,eAAS,WAAA;AAAA,IAAW;AAAA,EACtB,CACD;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EAAA;AAEJ;ACbA,MAAA,cAAe;AAAA,EACb,MAAM;AACR;;;;;;;;;;;;;;;;;;AA3BA,UAAM,QAAQ;AAgBd,UAAM,cAAc;AAAA,MAClB,WAAW,OAAO,MAAM,cAAc,WAAW,WAAW,MAAM,SAAS,IAAI,MAAM;AAAA,MACrF,YAAY,MAAM;AAAA,IAAA;AAGpB,UAAM,EAAE,aAAa,cAAc,eAAe,WAAW;;0BA7B3DA,mBAEM,OAAA;AAAA,iBAFG;AAAA,QAAJ,KAAI;AAAA,QAAe,OAAKC,eAAA,CAAA,gBAAA,EAAA,gBAAqCC,MAAA,SAAA,GAAS,eAAA,CAAkBA,MAAA,SAAA,EAAA,CAAS,CAAA;AAAA,MAAA;QACpGC,WAAa,KAAA,QAAA,WAAA,CAAA,GAAA,QAAA,IAAA;AAAA,MAAA;;;;;"}